services:
  db:
    image: postgres:13
    env_file:
      - docker_purldb.env
    volumes:
      - db_data:/var/lib/postgresql/data/
    shm_size: "1gb"
    restart: always

  redis:
    image: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: always


  # This service is responsible for ensuring the correct ownership of files
  # in the shared volumes used by the application (static and workspace).
  # It ensures that all files inside the `/var/purldb/` directory are owned
  # by the user and group with the UID and GID defined in the environment variables
  # APP_UID and APP_GID, which default to 1000 if not set.
  #
  # The service runs only once (due to "restart: no") and performs a `chown` operation
  # to change the ownership of the static and workspace directories, ensuring proper
  # file access rights for the running application containers.
  #
  # Volumes mounted:
  # - static: Ensures the ownership of static files in the /var/purldb/static directory
  # - media: Ensures the ownership of media files in the /var/purldb/workspace directory
  #
  # Notes: This service can be removed in future ScanCode.io release.
  chown:
    image: docker.io/library/alpine:latest
    restart: "no"
    command: sh -c "
      if [ ! -f /var/purldb/workspace/.chown_done ]; then
        chown -R ${APP_UID:-1000}:${APP_GID:-1000} /var/purldb/ &&
        touch /var/purldb/workspace/.chown_done;
        echo 'Chown applied!';
      else
        echo 'Chown already applied for /var/purldb/workspace/, skipping...';
      fi;"
    env_file:
      - docker.env
    volumes:
      - static:/var/purldb/static/

  web:
    build: .
    command: wait-for-it --strict --timeout=60 db:5432 -- sh -c "
        python manage_purldb.py migrate &&
        python manage_purldb.py collectstatic --no-input --verbosity 0 --clear &&
        gunicorn purldb_project.wsgi:application --bind :8000 --timeout 600 --workers 8"
    env_file:
      - docker_purldb.env
    expose:
      - 8000
    volumes:
      - .env:/opt/purldb/.env
      - /etc/purldb/:/etc/purldb/
      - temp_data:/tmp/minecode/
      - static:/var/purldb/static/
    depends_on:
      db:
        condition: service_healthy
      chown:
        condition: service_completed_successfully

  priority_queue:
    build: .
    command: wait-for-it web:8000 -- python manage_purldb.py priority_queue
    env_file:
      - docker_purldb.env
    volumes:
      - .env:/opt/purldb/.env
      - /etc/purldb/:/etc/purldb/
    profiles:
      - priority_queue
    depends_on:
      - db
      - web

  scheduler:
    build: .
    command: wait-for-it web:8000 -- python manage_purldb.py run_scheduler
    env_file:
      - docker_purldb.env
    volumes:
      - .env:/opt/purldb/.env
      - /etc/purldb/:/etc/purldb/
    depends_on:
      - redis
      - db
      - web

  rq_worker:
    build: .
    command: wait-for-it web:8000 -- python manage_purldb.py rqworker default
    env_file:
      - docker_purldb.env
    volumes:
      - .env:/opt/purldb/.env
      - /etc/purldb/:/etc/purldb/
      - temp_data:/tmp/minecode/
    depends_on:
      - redis
      - db
      - web

volumes:
  db_data:
  static:
  redis_data:
  temp_data:
